<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Willie</title>
        <link>https://www.wll.moe</link>
        <description>RSS for blog</description>
        <lastBuildDate>Mon, 25 Apr 2022 12:07:59 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright 2022 - Willie</copyright>
        <item>
            <title><![CDATA[使用archlinux搭建路由器[转载]]]></title>
            <link>https://wll.moe/posts/archrouter</link>
            <guid>https://wll.moe/posts/archrouter</guid>
            <pubDate>Wed, 20 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Use Archlinux build router]]></description>
            <content:encoded><![CDATA[<h1 id="安装系统"><a aria-hidden="true" tabindex="-1" href="#安装系统"><span class="icon icon-link"></span></a>安装系统</h1>
<p>安装 Arch Linux。不过，先跳过「设置网络管理器」这一步</p>
<h1 id="设置网络管理器"><a aria-hidden="true" tabindex="-1" href="#设置网络管理器"><span class="icon icon-link"></span></a>设置网络管理器</h1>
<p>这次，我们使用 <strong>systemd-networkd</strong>。</p>
<p>设备是双网口的，将会一个口做 WAN 口接外网，另一个口做 LAN 口（接交换机，接电脑，接 AP，接支持桥接的路由器 WAN 口，或者接关了 DHCP 的不支持桥接的路由器 LAN 口都可以）我们需要配置两个网络设置，并且支持不能用 en 了)
我们先 <code>ip addr</code> 看一下现在连接着的接口，就把它当作 WAN 口好了</p>
<ul>
<li>首先是 WAN 口的配置：</li>
</ul>
<pre><code class="hljs language-shell">sudo vim /etc/systemd/network/20-ext-dhcp.network`
</code></pre>
<pre><code class="hljs language-shell">[Match]
Name=enp4s0

[Network]
DHCP=ipv4
IPv6AcceptRA=yes # 接收 IPv6 的路由通告

[DHCPv4]
UseHostname=true
</code></pre>
<ul>
<li>然后来设置 LAN 口：</li>
</ul>
<pre><code class="hljs language-shell">sudo vim 21-int.network
</code></pre>
<pre><code class="hljs language-shell">[Match]
Name=enp3s0

[Link]
Multicast=yes

[Network]
Address=10.0.0.1/16
MulticastDNS=yes
IPMasquerade=both
IPv6SendRA=yes
DHCPv6PrefixDelegation=yes

[IPv6SendRA]
Managed=yes
OtherInformation=yes
</code></pre>
<p><strong>10.0.0.1/16</strong> 是将来软路由 LAN 口的 IP 地址和子网（如果看不懂 xx.xx.xx.xx/xx 这样的表示方式，了解一下 IP-CIDR）</p>
<ul>
<li>开启 DNS 服务器</li>
</ul>
<p>我们暂且使用 <strong>systemd-resolved</strong> 的 DNS 服务器。开启的方法非常简单，只要创建一个文件</p>
<pre><code class="hljs language-shell">sudo vim /etc/systemd/resolved.conf.d/listen-on-internal.conf
</code></pre>
<pre><code class="hljs language-shell">[Resolve]
DNSStubListenerExtra=10.0.0.1
</code></pre>
<p>然后，得确定 <strong>systemd-networkd</strong> 的两个服务启用</p>
<pre><code class="hljs language-shell">systemctl enable systemd-networkd
systemctl enable systemd-resolved
</code></pre>
<ul>
<li>设置 DHCP 服务器</li>
</ul>
<p>我们要用的 <strong>dhcpd</strong> 服务位于 dhcp 这个包</p>
<p>（dhcpcd 时 DHCP 客户端，c 代表 client，d 代表 daemon，后台服务）</p>
<pre><code class="hljs language-shell">sudo pacman -S dhcp
</code></pre>
<ul>
<li>然后创建文件</li>
</ul>
<pre><code class="hljs language-shell">sudo vim /etc/dhcpd.conf
</code></pre>
<p>在这里可以配置分配 IP 的范围，以及固定 IP 分配</p>
<pre><code class="hljs language-shell">option domain-name-servers 10.0.0.1;
option subnet-mask 255.255.0.0;
option routers 10.0.0.1;
subnet 10.0.0.0 netmask 255.255.0.0 {
    range 10.0.1.4 10.0.1.250;
    host clansty-mac {
        hardware ethernet f8:e4:3b:77:c1:b7;
        fixed-address 10.0.0.2;
    }
    host ap {
        hardware ethernet 28:d1:27:99:5b:26;
        fixed-address 10.0.2.1;
    }
}
</code></pre>
<p>另外，dhcpd 默认会在所有的接口上运行，我们需要稍微修改一下服务文件，给它加个参数</p>
<pre><code class="hljs language-shell">sudo cp /usr/lib/systemd/system/dhcpd4.service /etc/systemd/system/dhcpd4@.service
sudo vim /etc/systemd/system/dhcpd4@.service
</code></pre>
<pre><code class="hljs language-shell">  ...
  [Service]
  Type=forking
- ExecStart=/usr/bin/dhcpd -4 -q -cf /etc/dhcpd.conf -pf /run/dhcpd4/dhcpd.pid
+ ExecStart=/usr/bin/dhcpd -4 -q -cf /etc/dhcpd.conf -pf /run/dhcpd4/dhcpd.pid %I
  ...
</code></pre>
<p>然后我们启用服务就可以了</p>
<pre><code class="hljs language-shell">systemctl enable dhcpd4@enp3s0.service
</code></pre>
<ul>
<li>开启内核网络转发</li>
</ul>
<pre><code class="hljs language-shell">sudo vi /etc/sysctl.d/30-ipforward.conf
net.ipv4.ip_forward=1
net.ipv6.ip_forward=1
</code></pre>
<p>现在，重启进入系统，然后把电脑接到软路由刚才定义的 LAN 口上，电脑应该就能获取到 IP 地址，并且能上网了</p>
<h1 id="安装-clash"><a aria-hidden="true" tabindex="-1" href="#安装-clash"><span class="icon icon-link"></span></a>安装 Clash</h1>
<p>首先是安装软件包。<strong>clash-premium-bin</strong> 包在 Clansty 源里</p>
<pre><code class="hljs language-shell">sudo pacman -S clash-premium-bin
</code></pre>
<p>然后将你的 clash 配置文件放置在 <code>/etc/clash</code> 中。由于包里的服务文件是用户级别的，我们现在创建一个系统级别服务</p>
<pre><code class="hljs language-shell">sudo vim /etc/systemd/system/clash.service
</code></pre>
<pre><code class="hljs language-shell">[Unit]
Description=A rule based proxy in Go for neko.
After=network.target

[Service]
Type=exec
Restart=on-abort
ExecStart=/usr/bin/clash -d /etc/clash

[Install]
WantedBy=multi-user.target
</code></pre>
<p>然后，我们可以禁用 <strong>systemd-resolved</strong> 了。我们接下来要用 clash 自带的 DNS 服务器，实现 DOT，DOH 或是 FakeIP</p>
<pre><code class="hljs language-shell">sudo systemctl disable --now systemd-resolved
sudo rm /etc/resolv.conf
echo 'nameserver 127.0.0.1' | sudo tee /etc/resolv.conf
</code></pre>
<p>Clash 的配置文件中要有以下内容</p>
<pre><code class="hljs language-shell">
tun:
  enable: true
  stack: system
  dns-hijack:
   - tcp://8.8.8.8:53
   - udp://8.8.8.8:53

dns:
  enable: true
  enhanced-mode: 是什么呢
  fake-ip-range: 198.19.0.1/16 # 将会是 tun 的子网
  listen: 0.0.0.0:53
  default-nameserver:
    # 用来找那些 DOH 域名的 IP 的 DNS 服务器
    - 223.5.5.5
    - 8.8.8.8
  nameserver:
    # 默认用这些服务器来查询
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
  fallback:
<span class="hljs-meta prompt_">  	# </span><span class="bash">符合下一节的条件时，使用以下 DNS 服务器查询</span>
    - https://dns.google/dns-query
    - https://1.1.1.1/dns-query
  fallback-filter:
    geoip: true
    ipcidr:
      - 240.0.0.0/4
      - 127.0.0.1/8
      - 0.0.0.0/32
    domain:
      - +.google.com
      - +.twitter.com
      - +.google.com.hk
      - +.googleapis.com
  ipv6: true
</code></pre>
<p>一种不太对的配置方法
这是我刚开始的时候用的方法。用完之后感觉，怎么这么快就好了，不过好像有哪里不对。</p>
<p>这是基于 FakeIP 的方法，让 clash 的 DNS 返回虚拟的 IP 地址。而虚拟 IP 恰好在 Clash Tun 的子网下，请求会自动路由到 clash 中。</p>
<pre><code class="hljs language-shell">dns:
  enable: true
  enhanced-mode: fake-ip
sudo systemctl enable --now clash
</code></pre>
<p>这样之后，在电脑上打开一个浏览器，诶 网都能上了！</p>
<p>不过，后面转圈圈的 Telegram 还在转圈圈，需要指定代理为 <strong>10.0.0.1:7890</strong> 这样才能连上</p>
<p>出现这样的问题也就是因为 FakeIP 的原理，必须是经过 clash DNS 服务器进行解析的，通过域名的连接才会通过 clash</p>
<p>这么做其实应该说只是不推荐，不是不行。所以我写在这里</p>
<p>比较好（但是复杂）的配置方法
我们现在把 DNS 改为 <strong>redir-host</strong>，这时候 clash DNS 就会做一个普通 DNS 服务器的事，将安全的 DOT 或者 DOH 协议转换为 UDP53 的 DNS 协议</p>
<pre><code class="hljs language-shell">dns:
  enable: true
  enhanced-mode: fake-ip
</code></pre>
<p>这样之后，再启动 clash，我们的流量并没有经过 clash。</p>
<p>查看 <code>ip route</code> 发现，我们默认的流量路由还是 WAN 口的网卡。我们需要手动编辑路由表，把 LAN 口传入的到外网的流量传递给 tun 的网卡。</p>
<p>如果编辑主路由表的话，会导致 clash 自己连接服务器的流量也传递给自己，然后就造成循环了，这不好。所以我们编辑一张新的路由表，并且只用来处理 LAN 口流量</p>
<p>这里的 <strong>198.19.0.1</strong> 和 <strong>198.19.0.0/16</strong> 就对应配置文件中的 dns.fake-ip-range。如果没有设置 clash 的 DNS 服务器的话，默认将会是 198.18.0.1/16</p>
<pre><code class="hljs language-shell">sudo ip route add default via 198.19.0.1 dev utun table 233
sudo ip route add 198.19.0.0/16 dev utun table 233
sudo ip route add 10.0.0.0/16 dev enp3s0 table 233

sudo ip rule add from 10.0.0.0/16 table 233
</code></pre>
<p>这几行命令出了之后，后面的 Telegram 立即连上了，并且网页什么的也全都正常了。现在客户端获取到的 IP 也是真实的 IP（但这样会比 FakeIP 性能差一些）</p>
<p>然后，我们把这些写到脚本里面，并在 clash 启动之后就自动运行</p>
<pre><code class="hljs language-shell">sudo mkdir /etc/clash/scripts
sudo vi /etc/clash/scripts/setup.sh
</code></pre>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_">#</span><span class="bash">!/bin/bash</span>
<span class="hljs-meta prompt_">
#</span><span class="bash"><span class="hljs-built_in">wait</span> <span class="hljs-keyword">for</span> TUN device</span>
while ! ip address show utun > /dev/null; do
    sleep 0.2
done
</code></pre>
<pre><code class="hljs language-shell">ip route flush table 233
ip route add default via 198.19.0.1 dev utun table 233
ip route add 198.19.0.0/16 dev utun table 233
ip route add 10.0.0.0/16 dev enp3s0 table 233

ip rule add from 10.0.0.0/16 table 233
</code></pre>
<p>再写一个在 clash 退出的时候还原配置的脚本</p>
<pre><code class="hljs language-shell">sudo vi /etc/clash/scripts/unsetup.sh
</code></pre>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_">#</span><span class="bash">!/bin/bash</span>

ip rule delete from all table 233
ip route flush table 233
</code></pre>
<p>稍微改一下 clash 的 <strong>systemd</strong> 服务，就是我们刚才创建的那个</p>
<pre><code class="hljs language-shell">  [Service]
  Type=exec
  Restart=on-abort
  ExecStart=/usr/bin/clash -d /etc/clash
+ ExecStartPost=+/etc/clash/scripts/setup.sh
+ ExecStopPost=+/etc/clash/scripts/unsetup.sh
</code></pre>
<p>这样之后，就算再重启，我们的服务也能正常了</p>
<hr/>
<p>转载自<a href="https://nyac.at/posts/archlinux-router">此文</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浅谈搭建现代化静态博客]]></title>
            <link>https://wll.moe/posts/staticblog</link>
            <guid>https://wll.moe/posts/staticblog</guid>
            <pubDate>Tue, 19 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[talking how to make a static blog...]]></description>
            <content:encoded><![CDATA[<h1 id="回顾过去搭建"><a aria-hidden="true" tabindex="-1" href="#回顾过去搭建"><span class="icon icon-link"></span></a>回顾过去搭建</h1>
<p>第一次搭建是在 2020 年的假期，利用电脑搭建了基于<strong>Gridea</strong>构建的博客。用着一款很简约的主题<a href="https://github.com/ITJoker233/Gridea-theme-Chic">Chic</a>，成功的搭建了第一个自己的站点。但它有个很大的缺点：只能用本地的客户端，不支持手机，也不容易云端操作。所以说它并不满足我的需求。</p>
<p>之后我发现了一个很好用的程序，叫做<strong>Pandoc</strong>。</p>
<blockquote>
<p>Pandoc is a free and open-source document converter, widely used as a writing tool (especially by scholars)[2] and as a basis for publishing workflows.[3] It was created by John MacFarlane, a philosophy professor at the University of California, Berkeley. — From WikiPedia.</p>
</blockquote>
<p>它可以转换包括 <code>PDF</code>, <code>MD</code>, <code>HTML</code>, 甚至是<code>Word</code>等十几种格式，还拥有强大的自定义功能。它微不足道的小功能就满足我的博客需求了。我参考了<a href="https://ayaka.shn.hk/">三日月綾香</a>的博客，写出了完全由自己设计的网页，发布了两款主题：<a href="https://github.com/xuwillie/theme-clean">Clean</a>和<a href="https://github.com/xuwillie/theme-console">Console</a>。</p>
<img src="https://wll.moe/Screenshot_20220419_182819.jpg" alt="" width="1080" height="1800"/>
<p>除了这几个偏门的方案，还有一些很流行的静态博客框架，比如 <strong>Hexo</strong>, <strong>Hugo</strong>, <strong>Jekyll</strong> 等。然而已经有了这么多好的选择，我却没有用这些!</p>
<p><strong>今年 2 二月份</strong>，我看到了日本的一位前端工程师 <strong>Takuya Matsuyama</strong> 用 NextJS 制作的的<a href="https://craftz.dog">个人网站</a>，了解了其搭建过程，这使我走向了使用 React 元框架的道路。</p>
<p>相比普通的博客网站，用 React 元框架和 NextJS 制作的网站更加先进，现代：</p>
<ol>
<li>切换页面时网站只会加载新的未加载的内容，重复利用现有资源，减少了不必要的加载时间，提升了网站性能。</li>
<li>网站重载不需要刷新，通过比如 <strong>Framer-motion</strong> 实现动画效果，有着 Native 级的浏览体验</li>
<li><strong>React</strong>元框架有着丰富的生态链，可以快速实现比如动画，暗黑模式效果。NextJS 也使得支持更多获取数据的方式，比如 <strong>CMS</strong>(See <a href="https://github.com/vercel/next.js/tree/canary/examples/cms-builder-io">NextJS Example</a>)，可以实现获取云端内容渲染成文章，即使是没有后端的静态博客！</li>
</ol>
<p>现在来说说如何用 Nextjs 来制作博客吧！</p>
<h1 id="搭建过程"><a aria-hidden="true" tabindex="-1" href="#搭建过程"><span class="icon icon-link"></span></a>搭建过程</h1>
<blockquote>
<p>搭建过程比较复杂，请看完我的所有步骤！</p>
</blockquote>
<h2 id="准备工作终端环境中进行"><a aria-hidden="true" tabindex="-1" href="#准备工作终端环境中进行"><span class="icon icon-link"></span></a>准备工作(终端环境中进行)</h2>
<p>首先你需要安装 <strong>NodeJS</strong> 环境，Windows 用户可以用 <strong>chocolatey</strong> 通过命令安装，<code>choco install nodejs yarn</code>。</p>
<h3 id="选择一个目录并初始化项目"><a aria-hidden="true" tabindex="-1" href="#选择一个目录并初始化项目"><span class="icon icon-link"></span></a>选择一个目录并初始化项目</h3>
<pre><code class="hljs language-shell">yarn init -y
mkdir pages
mkdir components
mkdir lib
mkdir styles
mkdir _posts
touch next.config.js
touch .eslintrc.json
touch .prettierignore
touch prettier.config.js
yarn add @mdx-js/loader gray-matter next-mdx-remote next-compose-plugins rehype remark remark-html react react-dom next eslint eslint-config-next prettier
</code></pre>
<blockquote>
<p><strong>ESlint</strong>是用来语法检查的工具。 <strong>prettier</strong> 用来整理代码。</p>
</blockquote>
<h3 id="编写文件"><a aria-hidden="true" tabindex="-1" href="#编写文件"><span class="icon icon-link"></span></a>编写文件</h3>
<p>编写 package.json</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Willie-homepage"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"version"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"1.1.0"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Willie's website"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"scripts"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"dev"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"next dev"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"build"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"next build"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"start"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"next start"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prettier"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"prettier --write ."</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"lint"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"next lint"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"keywords"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"author"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Willie"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"license"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"MIT"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"dependencies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"@mdx-js/loader"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"date-fns"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"gray-matter"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"next"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"next-compose-plugins"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"next-mdx-remote"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"react"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"react-dom"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"rehype"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"remark"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"remark-html"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span>
  <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"devDependencies"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"eslint"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"eslint-config-next"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"prettier"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"latest"</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<blockquote>
<p>请将 <strong>name</strong>，<strong>author</strong> 等个人信息自行修改</p>
</blockquote>
<p>编写 next.config.js</p>
<pre><code class="hljs language-javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = {
  <span class="hljs-attr">reactStrictMode</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">swcMinify</span>: <span class="hljs-literal">true</span>,
};
</code></pre>
<p>编写 .eslintrc.json</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">"root"</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"extends"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"next"</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">"rules"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"no-unused-vars"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-string">"error"</span><span class="hljs-punctuation">,</span>
      <span class="hljs-punctuation">{</span>
        <span class="hljs-attr">"argsIgnorePattern"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^_"</span><span class="hljs-punctuation">,</span>
        <span class="hljs-attr">"varsIgnorePattern"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"^_"</span>
      <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"react/display-name"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p>编写 .prettierignore</p>
<pre><code class="hljs language-json">node_modules
.next
</code></pre>
<p>编写 prettier.config.js</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> options = {
  <span class="hljs-attr">arrowParens</span>: <span class="hljs-string">"avoid"</span>,
  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">bracketSpacing</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">endOfLine</span>: <span class="hljs-string">"if"</span>,
  <span class="hljs-attr">semi</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">tabwidth</span>: <span class="hljs-number">2</span>,
  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">"none"</span>,
};
</code></pre>
<p>创建自定义样式</p>
<p>在 <code>styles/global.css</code> 里将你所需要样式填写进去</p>
<p>创建获取文章内容的 JS</p>
<p>在 <code>lib/mdx.js</code> 里写入以下内容</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">"fs"</span>;
<span class="hljs-keyword">import</span> matter <span class="hljs-keyword">from</span> <span class="hljs-string">"gray-matter"</span>;
<span class="hljs-keyword">import</span> { serialize } <span class="hljs-keyword">from</span> <span class="hljs-string">"next-mdx-remote/serialize"</span>;
<span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">"path"</span>;

<span class="hljs-keyword">const</span> root = process.<span class="hljs-title function_">cwd</span>();

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFiles</span>(<span class="hljs-params">type</span>) {
  <span class="hljs-keyword">return</span> fs.<span class="hljs-title function_">readdirSync</span>(path.<span class="hljs-title function_">join</span>(root, <span class="hljs-string">"_posts"</span>, type));
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getFileBySlug</span>(<span class="hljs-params">type, slug</span>) {
  <span class="hljs-keyword">const</span> source = slug
    ? fs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">join</span>(root, <span class="hljs-string">"_posts"</span>, type, <span class="hljs-string">`<span class="hljs-subst">${slug}</span>.mdx`</span>), <span class="hljs-string">"utf-8"</span>)
    : fs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">join</span>(root, <span class="hljs-string">"_posts"</span>, <span class="hljs-string">`<span class="hljs-subst">${type}</span>.mdx`</span>), <span class="hljs-string">"utf-8"</span>);

  <span class="hljs-keyword">const</span> { <span class="hljs-attr">data</span>: metaData, content } = <span class="hljs-title function_">matter</span>(source);
  <span class="hljs-keyword">const</span> contentSerialized = <span class="hljs-keyword">await</span> <span class="hljs-title function_">serialize</span>(content);

  <span class="hljs-keyword">return</span> {
    content,
    contentSerialized,
    <span class="hljs-attr">slug</span>: slug ? slug : <span class="hljs-literal">null</span>,
    metaData,
  };
}

<span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAllFilesFrontMatter</span>(<span class="hljs-params">type</span>) {
  <span class="hljs-keyword">const</span> files = fs.<span class="hljs-title function_">readdirSync</span>(path.<span class="hljs-title function_">join</span>(root, <span class="hljs-string">"_posts"</span>, type));

  <span class="hljs-keyword">return</span> files.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">allPosts, postSlug</span>) =></span> {
    <span class="hljs-keyword">const</span> source = fs.<span class="hljs-title function_">readFileSync</span>(
      path.<span class="hljs-title function_">join</span>(root, <span class="hljs-string">"_posts"</span>, type, postSlug),
      <span class="hljs-string">"utf-8"</span>
    );
    <span class="hljs-keyword">const</span> { data } = <span class="hljs-title function_">matter</span>(source);

    <span class="hljs-keyword">return</span> [
      {
        ...data,
        <span class="hljs-attr">slug</span>: postSlug.<span class="hljs-title function_">replace</span>(<span class="hljs-string">".mdx"</span>, <span class="hljs-string">""</span>),
      },
      ...allPosts,
    ];
  }, []);
}
</code></pre>
<blockquote>
<p>这段代码获取了文件名作为路径，用 <strong>front-matter</strong> 获取了 <strong>Markdown</strong> 文件的内容和媒体，感兴趣的可以在 <a href="https://nextjs.org">NextJS</a> 文档中找到相关介绍！</p>
</blockquote>
<p>编写 <code>pages/_app.js</code></p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">"../styles/global.css"</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params">{ Component, pageProps }</span>) {
  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag"><<span class="hljs-name">Component</span> {<span class="hljs-attr">...pageProps</span>} /></span></span>;
}
</code></pre>
<p>编写 <code>components/BlogPost/index.js</code></p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">NextLink</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"next/link"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">BlogPost</span> = (<span class="hljs-params">{ title, date, excerpt, slug }</span>) => {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag"><<span class="hljs-name">NextLink</span> <span class="hljs-attr">href</span>=<span class="hljs-string">{</span>`/${<span class="hljs-attr">slug</span>}`} <span class="hljs-attr">passHref</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">li</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"postdate"</span>></span>
          <span class="hljs-tag"><<span class="hljs-name">span</span>></span>{date}<span class="hljs-tag"></<span class="hljs-name">span</span>></span>
        <span class="hljs-tag"></<span class="hljs-name">div</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">h2</span>></span>{title}<span class="hljs-tag"></<span class="hljs-name">h2</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"excerpt"</span>></span>{excerpt}<span class="hljs-tag"></<span class="hljs-name">p</span>></span>
      <span class="hljs-tag"></<span class="hljs-name">li</span>></span>
    <span class="hljs-tag"></<span class="hljs-name">NextLink</span>></span></span>
  );
};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">BlogPost</span>;
</code></pre>
<blockquote>
<p>该代码生成文章列表，根据自己需求编写。</p>
</blockquote>
<p>导航栏 Nav 的例子，编写 <code>components/Nav/index.js</code></p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Nav</span> = (<span class="hljs-params"></span>) => {
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag"><<span class="hljs-name">nav</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">h1</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"title"</span>></span>WLL<span class="hljs-symbol">‘</span>s blog<span class="hljs-tag"></<span class="hljs-name">h1</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">div</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"icon"</span>></span>☽<span class="hljs-tag"></<span class="hljs-name">p</span>></span>
      <span class="hljs-tag"></<span class="hljs-name">div</span>></span>
    <span class="hljs-tag"></<span class="hljs-name">nav</span>></span></span>
  );
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Nav</span>;
</code></pre>
<p>编写 <code>pages/index.js</code></p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">BlogPost</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/BlogPost"</span>;
<span class="hljs-keyword">import</span> { getAllFilesFrontMatter } <span class="hljs-keyword">from</span> <span class="hljs-string">"../lib/mdx"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Head</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"next/head"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Footer"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Nav</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Nav"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">Blog</span> = (<span class="hljs-params">{ posts }</span>) => {
  <span class="hljs-keyword">const</span> filteredBlogPosts = posts.<span class="hljs-title function_">sort</span>(
    <span class="hljs-function">(<span class="hljs-params">a, b</span>) =></span> <span class="hljs-title class_">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(b.<span class="hljs-property">date</span>)) - <span class="hljs-title class_">Number</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(a.<span class="hljs-property">date</span>))
  );

  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag"><></span>
      <span class="hljs-tag"><<span class="hljs-name">Head</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">title</span>></span>WLL<span class="hljs-symbol">‘</span>s blog<span class="hljs-tag"></<span class="hljs-name">title</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"WLL<span class="hljs-symbol">‘</span>s blog"</span> /></span>
      <span class="hljs-tag"></<span class="hljs-name">Head</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">Nav</span> /></span>
      <span class="hljs-tag"><<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"post-list"</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">h2</span>></span>※ My Articles<span class="hljs-tag"></<span class="hljs-name">h2</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">ul</span>></span>
          {filteredBlogPosts.map((post) => (
            <span class="hljs-tag"><<span class="hljs-name">BlogPost</span> <span class="hljs-attr">key</span>=<span class="hljs-string">{post.title}</span> {<span class="hljs-attr">...post</span>} /></span>
          ))}
        <span class="hljs-tag"></<span class="hljs-name">ul</span>></span>
      <span class="hljs-tag"></<span class="hljs-name">div</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">Footer</span> /></span>
    <span class="hljs-tag"></></span></span>
  );
};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Blog</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getStaticProps</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) => {
  <span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getAllFilesFrontMatter</span>(<span class="hljs-string">""</span>);

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">props</span>: {
      posts,
    },
  };
};
</code></pre>
<blockquote>
<p>代码中的 Footer 可以参考 Nav 的编写。</p>
</blockquote>
<p>编写 <code>pages/[slug].js</code></p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">import</span> { <span class="hljs-title class_">MDXRemote</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">"next-mdx-remote"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Head</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"next/head"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Footer</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Footer"</span>;
<span class="hljs-keyword">import</span> <span class="hljs-title class_">Nav</span> <span class="hljs-keyword">from</span> <span class="hljs-string">"../components/Nav"</span>;
<span class="hljs-keyword">import</span> { getFileBySlug, getFiles } <span class="hljs-keyword">from</span> <span class="hljs-string">"../lib/mdx"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-title function_">BlogPost</span> = (<span class="hljs-params">{ post }</span>) => {
  <span class="hljs-keyword">const</span> { metaData, contentSerialized } = post;
  <span class="hljs-keyword">return</span> (
    <span class="xml"><span class="hljs-tag"><<span class="hljs-name">div</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">Head</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">title</span>></span>{metaData.title}<span class="hljs-tag"></<span class="hljs-name">title</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"description"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"{metaData.title}"</span> /></span>
      <span class="hljs-tag"></<span class="hljs-name">Head</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">Nav</span> /></span>
      <span class="hljs-tag"><<span class="hljs-name">header</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"card"</span>></span>
          <span class="hljs-tag"><<span class="hljs-name">h1</span>></span>{metaData.title}<span class="hljs-tag"></<span class="hljs-name">h1</span>></span>
          <span class="hljs-tag"><<span class="hljs-name">h3</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"date"</span>></span> ∇ {metaData.date} <span class="hljs-tag"></<span class="hljs-name">h3</span>></span>
          <span class="hljs-tag"><<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"author"</span>></span> ¶ Willie<span class="hljs-tag"></<span class="hljs-name">p</span>></span>
          <span class="hljs-tag"><<span class="hljs-name">div</span>></span>
            <span class="hljs-tag"><<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"postexcerpt"</span>></span>{metaData.excerpt}<span class="hljs-tag"></<span class="hljs-name">p</span>></span>
          <span class="hljs-tag"></<span class="hljs-name">div</span>></span>
        <span class="hljs-tag"></<span class="hljs-name">div</span>></span>
      <span class="hljs-tag"></<span class="hljs-name">header</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"post"</span>></span>
        <span class="hljs-tag"><<span class="hljs-name">MDXRemote</span> <span class="hljs-attr">compiledSource</span>=<span class="hljs-string">{contentSerialized.compiledSource}</span> /></span>
      <span class="hljs-tag"></<span class="hljs-name">div</span>></span>
      <span class="hljs-tag"><<span class="hljs-name">Footer</span> /></span>
    <span class="hljs-tag"></<span class="hljs-name">div</span>></span></span>
  );
};
<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">BlogPost</span>;

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getStaticPaths</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) => {
  <span class="hljs-keyword">const</span> posts = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getFiles</span>(<span class="hljs-string">""</span>);

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">paths</span>: posts.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">p</span>) =></span> ({
      <span class="hljs-attr">params</span>: {
        <span class="hljs-attr">slug</span>: p.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\.mdx/</span>, <span class="hljs-string">""</span>),
      },
    })),
    <span class="hljs-attr">fallback</span>: <span class="hljs-literal">false</span>,
  };
};

<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getStaticProps</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">{ params }</span>) => {
  <span class="hljs-keyword">const</span> slug = params?.<span class="hljs-property">slug</span>;
  <span class="hljs-keyword">if</span> (slug) {
    <span class="hljs-keyword">try</span> {
      <span class="hljs-keyword">const</span> post = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getFileBySlug</span>(<span class="hljs-string">""</span>, slug);
      <span class="hljs-keyword">return</span> {
        <span class="hljs-attr">props</span>: {
          post,
        },
      };
    } <span class="hljs-keyword">catch</span> (error) {
      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);
    }
  }

  <span class="hljs-keyword">return</span> {
    <span class="hljs-attr">notFound</span>: <span class="hljs-literal">true</span>,
  };
};
</code></pre>
<blockquote>
<p>这里是文章的界面！感谢看到这一步，至此已经大功告成了！</p>
</blockquote>
<h2 id="尝试编写文章"><a aria-hidden="true" tabindex="-1" href="#尝试编写文章"><span class="icon icon-link"></span></a>尝试编写文章</h2>
<blockquote>
<p>整理一下之前写的代码</p>
</blockquote>
<pre><code class="hljs language-shell">yarn run prettier
</code></pre>
<blockquote>
<p>在 <code>_posts</code> 中编写以 <strong>.mdx</strong> 后缀的 Markdown 文件</p>
</blockquote>
<p>例子</p>
<pre><code class="hljs language-md">---
title: "Something About Me"
date: "2021-07-18"
<span class="hljs-section">excerpt: "About..."
---</span>

<span class="hljs-section"># 关于我</span>

还有很多要改善的地方！

<span class="hljs-section"># 站点</span>

<span class="hljs-quote">> 除非另有说明，本博客所有文章均采用`CC BY-NC-SA 4.0 许可协议`。 转载请在文中明显位置注明出处</span>
</code></pre>
<p>现在用 <code>yarn run dev</code> 预览吧！</p>
<hr/>
<p>写这篇文章花费了很长时间，也希望网站搭建爱好者们可以参考本文，制作一个完全自己 DIY 的博客。可以参考这个<a href="https://old-blog-three.vercel.app/">博客</a>!</p>
<p>—-未完待续</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Test]]></title>
            <link>https://wll.moe/posts/test</link>
            <guid>https://wll.moe/posts/test</guid>
            <pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[test]]></description>
            <content:encoded><![CDATA[<h1 id="alpha"><a aria-hidden="true" tabindex="-1" href="#alpha"><span class="icon icon-link"></span></a>Alpha</h1>
<h2 id="table-of-contents"><a aria-hidden="true" tabindex="-1" href="#table-of-contents"><span class="icon icon-link"></span></a>Table of Contents</h2>
<ul>
<li><a href="#autolink-literals">Autolink literals</a></li>
<li><a href="#footnote">Footnote</a></li>
<li><a href="#strikethrough">Strikethrough</a></li>
<li><a href="#table">Table</a></li>
<li><a href="#tasklist">Tasklist</a></li>
<li><a href="#mathkatex">Math&KateX</a></li>
</ul>
<h2 id="autolink-literals"><a aria-hidden="true" tabindex="-1" href="#autolink-literals"><span class="icon icon-link"></span></a>Autolink Literals</h2>
<p><a href="http://www.example.com">www.example.com</a>, <a href="https://example.com">https://example.com</a>, and <a href="mailto:contact@example.com">contact@example.com</a>.</p>
<h2 id="footnote"><a aria-hidden="true" tabindex="-1" href="#footnote"><span class="icon icon-link"></span></a>Footnote</h2>
<p>A note<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup></p>
<h2 id="strikethrough"><a aria-hidden="true" tabindex="-1" href="#strikethrough"><span class="icon icon-link"></span></a>Strikethrough</h2>
<p><del>one</del> or <del>two</del> tildes.</p>
<h2 id="table"><a aria-hidden="true" tabindex="-1" href="#table"><span class="icon icon-link"></span></a>Table</h2>
<table><thead><tr><th>a</th><th align="left">b</th><th align="right">c</th><th align="center">d</th></tr></thead></table>
<h2 id="tasklist"><a aria-hidden="true" tabindex="-1" href="#tasklist"><span class="icon icon-link"></span></a>Tasklist</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled=""/> to do</li>
<li class="task-list-item"><input type="checkbox" checked="" disabled=""/> done</li>
</ul>
<h2 id="mathkatex"><a aria-hidden="true" tabindex="-1" href="#mathkatex"><span class="icon icon-link"></span></a>Math&Katex</h2>
<p>Two 🍰 is: 6.283185307179586</p>
<p>1 → 2</p>
<p>1 × 1 = 1</p>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>n</mi><mi>n</mi></msup><mspace width="1em"></mspace><mrow><mtext>n</mtext><mstyle scriptlevel="0" displaystyle="false"><mo>∈</mo><msup><mi>N</mi><mo>∗</mo></msup></mstyle></mrow></mrow><annotation encoding="application/x-tex">f(n)=n^n \quad \text{n$\in N^\ast$}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em"></span><span class="mord mathnormal" style="margin-right:0.10764em">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.7535em;vertical-align:-0.0391em"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em"><span style="top:-3.113em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em"></span><span class="mord text"><span class="mord">n</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span></span></span></div>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mo>−</mo><mi>b</mi><mo>±</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:2.2764em;vertical-align:-0.686em"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5904em"><span style="top:-2.314em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">2</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em"><span class="pstrut" style="height:3em"></span><span class="frac-line" style="border-bottom-width:0.04em"></span></span><span style="top:-3.677em"><span class="pstrut" style="height:3em"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9134em"><span class="svg-align" style="top:-3em"><span class="pstrut" style="height:3em"></span><span class="mord" style="padding-left:0.833em"><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em"><span style="top:-2.989em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mord">4</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span></span></span><span style="top:-2.8734em"><span class="pstrut" style="height:3em"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1266em"><span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></div>
<div class="math math-display"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mi>M</mi><msup><mi>C</mi><mn>2</mn></msup><mspace linebreak="newline"></mspace><mn>3</mn><mo stretchy="false">!</mo><mo>=</mo><mn>3</mn><mo>∗</mo><mn>2</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">E = MC^2 \\
    3! = 3*2*1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.05764em">E</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8641em"></span><span class="mord mathnormal" style="margin-right:0.10903em">M</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em"><span style="top:-3.113em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em"></span><span class="mord">3</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">1</span></span></span></span></span></div>
<section data-footnotes="true" class="footnotes"><h2 id="footnote-label" class="sr-only"><a aria-hidden="true" tabindex="-1" href="#footnote-label"><span class="icon icon-link"></span></a>Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>Big note. <a href="#user-content-fnref-1" data-footnote-backref="true" class="data-footnote-backref" aria-label="Back to content">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gitment Fix Record]]></title>
            <link>https://wll.moe/posts/gitment</link>
            <guid>https://wll.moe/posts/gitment</guid>
            <pubDate>Wed, 25 Aug 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[A record about fixing gitment]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>I couldn’t run it correctly. According to search, I found the reason and the fix method. So how can we fix it?</p>
</blockquote>
<p>Due to unknown case, the maintainer don’t update it with a long time. So the server get some problems.</p>
<h1 id="start"><a aria-hidden="true" tabindex="-1" href="#start"><span class="icon icon-link"></span></a>Start</h1>
<p>We can archieve it on Heroku clound!</p>
<ul>
<li>
<p>Log in <a href="https://www.heroku.com">Heroku</a></p>
</li>
<li>
<p>Fork the <a href="https://github.com/imsun/gh-oauth-server">server sources</a></p>
</li>
<li>
<p>Edit the package.json. Add “heroku": "NODE_ENV=production node server” in “scripts”</p>
</li>
<li>
<p>Create Procfile, add web: npm run heroku, then create <strong>app.json</strong>, add “name": "gh-oauth-server”</p>
</li>
<li>
<p>Open <a href="https://heroku.com/deploy?template=URL">heroku</a>, where URL is changed to a fork address e.g. github.com/USERNAME/gh-oauth-server</p>
</li>
<li>
<p>Create the software. Change the original gh-oauth.imsun.net to “YourAppName”.herokuapp.com</p>
</li>
</ul>
<p>Enjoy~</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How Mi Cc9e Flash into Custom Android]]></title>
            <link>https://wll.moe/posts/xiaomicc9</link>
            <guid>https://wll.moe/posts/xiaomicc9</guid>
            <pubDate>Fri, 25 Jun 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[How Mi cc9e Flash into custom Android]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Two ROMs are provided, both of which need to unlock BL and flash in <a href="https://mifirm.net/downloadtwrp/151">TWRP</a>, And <a href="https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-WEEKLY-RELEASES/20.6.11/xiaomi.eu_multi_MICC9e_20.6.11_v12-10.zip/download">EU ROM</a></p>
</blockquote>
<h1 id="rom1"><a aria-hidden="true" tabindex="-1" href="#rom1"><span class="icon icon-link"></span></a>Rom#1</h1>
<blockquote>
<p>This is A3 ROM, but it works fine</p>
</blockquote>
<ol>
<li>Dowdload <a href="https://crdroid.net/laurel_sprout">Crdorid ROM</a></li>
<li>Download <a href="https://androidfilehost.com/?fid=818070582850510260">exe</a></li>
<li>Unzip payload_dumper.zip. Include payload_imput,payload_output and payload.exe</li>
<li>Extrqct Crdroid_rom.zip, copy payload.bin to payload_input</li>
<li>Run payload_dumper.exe, wait it colsed,then get psystem.img from payload_output</li>
<li>Erase <code>data</code> and <code>cache</code>, flash system.img</li>
<li><code>Please don't reboot</code>, flash <a href="https://github.com/topjohnwu/Magisk/releases/download/v20.4/Magisk-v20.4.zip">magisk 20.x</a></li>
<li>Enjoy it~</li>
</ol>
<h1 id="rom2"><a aria-hidden="true" tabindex="-1" href="#rom2"><span class="icon icon-link"></span></a>Rom#2</h1>
<blockquote>
<p>This is a Android 10 GSI</p>
</blockquote>
<ol>
<li><a href="https://github.com/phhusson/treble_experimentations/releases/download/v219/system-quack-arm64-ab-gapps.img.xz">Download</a></li>
<li>Enjoy it~</li>
</ol>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Android_logo_2019_%28stacked%29.svg/150px-Android_logo_2019_%28stacked%29.svg.png" alt=""/>]]></content:encoded>
        </item>
    </channel>
</rss>